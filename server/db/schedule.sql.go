// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: schedule.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createSchedule = `-- name: CreateSchedule :one
INSERT INTO schedule (
  user_id, start_date
) VALUES (
  $1, $2
)
RETURNING id, user_id, start_date, created_at
`

type CreateScheduleParams struct {
	UserID    string
	StartDate pgtype.Timestamp
}

func (q *Queries) CreateSchedule(ctx context.Context, arg CreateScheduleParams) (Schedule, error) {
	row := q.db.QueryRow(ctx, createSchedule, arg.UserID, arg.StartDate)
	var i Schedule
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.StartDate,
		&i.CreatedAt,
	)
	return i, err
}

const listSchedule = `-- name: ListSchedule :many
SELECT id, user_id, start_date, created_at FROM schedule ORDER BY id
`

func (q *Queries) ListSchedule(ctx context.Context) ([]Schedule, error) {
	rows, err := q.db.Query(ctx, listSchedule)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Schedule
	for rows.Next() {
		var i Schedule
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.StartDate,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
